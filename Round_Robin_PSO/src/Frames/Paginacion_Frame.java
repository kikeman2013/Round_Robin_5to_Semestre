/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

import Clases.*;
import java.util.Random;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ebelm
 */
public class Paginacion_Frame extends javax.swing.JFrame {

    Cola p; //Cola de los procesos ordenados
    Proceso ejecucion;
    int suma; //Variable auxiliar para la tabla de memoria real
    Cola fifo; //Cola en la que se guardan los procesos para poder realizar el algoritmo de remplazo FIFO
    int marcos;
    int proc = 65;//Variabale para poder convertir los procesos de numeros a letras
    int marco = 93;
    int pag = 1;
    int desp = 0; // Variable para asiganr el desplazamiento a las paginas
    int contador = 0; //Variable para asiganr la direccion logica a los procesos
    int total_paginas = 0;// Variable que almacena el numero de paginas totales
    float fallos = 0;//Variable que cuenta los fallos totales
    float referencias = 0;//Variable que cuenta las referencias totales
    Random contenido;//Variable que asigna un contenido aleatorio a la tabla de memoria real
    Random cont;

    //SE SACAN LOS MODELOS DE TODAS LAS TABLAS
    DefaultTableModel modeloreal;
    DefaultTableModel modelorealrespaldo;
    DefaultTableModel modelovirtual;
    DefaultTableModel modelopaginas;
    DefaultTableModel modelodisp;

    int contF = 0; //Se crea una variable que cuenta los fallos de página y  se inicializa a 0
    Random azar; //Creacion de una variable clase Random para objetos aleatorios
    int ya = 0;  //Creación de variable global de comprobación

    /**
     * Creates new form Paginacion_Frame
     */
    public Paginacion_Frame() {
        initComponents();

        setResizable(true); //Se establece que el Frame se puede redimensionar
        //SE INICIALIZAN TODAS LAS VARIABLES 
        suma = 0;
        fifo = new Cola();
        marcos = jtblReal.getRowCount();
        modeloreal = (DefaultTableModel) jtblReal.getModel(); //MODELO DE LA TABLA DE MEMORIA REAL
        modelorealrespaldo = (DefaultTableModel) jtblReal.getModel();//MODELO DE RESPALDO PARA LA TABLA VIRTUAL
        modelovirtual = (DefaultTableModel) jtblVirtual.getModel();//MODELO DE LA TABLA DE MEMORIA VIRUAL
        modelopaginas = (DefaultTableModel) Tablepaginas.getModel();//MODELO DE LA TABLA DE PAGINAS
        modelodisp = (DefaultTableModel) jtblMarcosDisponibles.getModel();//MODELO DE LA TABLA DE MARCOS DISPONIBLES
        //OBJETOS DE TIPO RANDOM
        azar = new Random();
        contenido = new Random();
        cont = new Random();
        //  ale();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jbtnCerrar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblVirtual = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblReal = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Tablepaginas = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtblMarcosDisponibles = new javax.swing.JTable();
        jlblFallo = new javax.swing.JLabel();
        jlblrrendimiento = new javax.swing.JLabel();
        jlblReferencias = new javax.swing.JLabel();
        jlblRefN = new javax.swing.JLabel();
        jlblFalloN = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Administrador de Memoria");

        jbtnCerrar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jbtnCerrar.setText("Cerrar");
        jbtnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCerrarActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5), "Memoria Virtual", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        jtblVirtual.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jtblVirtual.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pagina", "Desp.", "Direccion ", "Contenido"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtblVirtual);
        if (jtblVirtual.getColumnModel().getColumnCount() > 0) {
            jtblVirtual.getColumnModel().getColumn(0).setResizable(false);
            jtblVirtual.getColumnModel().getColumn(0).setPreferredWidth(80);
            jtblVirtual.getColumnModel().getColumn(1).setResizable(false);
            jtblVirtual.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5), "Memoria Real", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        jtblReal.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jtblReal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"0", "-", null},
                {"1", "-", null},
                {"2", "-", null},
                {"3", "-", null},
                {"4", "-", null},
                {"5", "-", null},
                {"6", "-", null},
                {"7", "-", null},
                {"8", "-", null},
                {"9", "-", null}
            },
            new String [] {
                "Marco", "Proceso", "D. Fisica"
            }
        ));
        jScrollPane2.setViewportView(jtblReal);
        if (jtblReal.getColumnModel().getColumnCount() > 0) {
            jtblReal.getColumnModel().getColumn(0).setResizable(false);
            jtblReal.getColumnModel().getColumn(0).setPreferredWidth(40);
            jtblReal.getColumnModel().getColumn(1).setResizable(false);
            jtblReal.getColumnModel().getColumn(1).setPreferredWidth(150);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5), "Tabla de paginas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        Tablepaginas.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Tablepaginas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Proceso", "Paginas"
            }
        ));
        jScrollPane4.setViewportView(Tablepaginas);
        if (Tablepaginas.getColumnModel().getColumnCount() > 0) {
            Tablepaginas.getColumnModel().getColumn(0).setResizable(false);
            Tablepaginas.getColumnModel().getColumn(0).setPreferredWidth(40);
            Tablepaginas.getColumnModel().getColumn(1).setResizable(false);
            Tablepaginas.getColumnModel().getColumn(1).setPreferredWidth(150);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5), "Marcos Disponibles", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        jtblMarcosDisponibles.setAutoCreateRowSorter(true);
        jtblMarcosDisponibles.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jtblMarcosDisponibles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Marcos"
            }
        ));
        jtblMarcosDisponibles.setColumnSelectionAllowed(true);
        jScrollPane5.setViewportView(jtblMarcosDisponibles);
        if (jtblMarcosDisponibles.getColumnModel().getColumnCount() > 0) {
            jtblMarcosDisponibles.getColumnModel().getColumn(0).setResizable(false);
            jtblMarcosDisponibles.getColumnModel().getColumn(0).setPreferredWidth(40);
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jlblFallo.setBackground(new java.awt.Color(0, 0, 0));
        jlblFallo.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jlblFallo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jlblrrendimiento.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jlblrrendimiento.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jlblReferencias.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N

        jlblRefN.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N

        jlblFalloN.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jlblFallo, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                                    .addComponent(jlblReferencias, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jlblFalloN, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                                    .addComponent(jlblRefN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jlblrrendimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnCerrar))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(0, 0, 0)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(480, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlblFallo, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlblFalloN, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlblRefN, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlblReferencias, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlblrrendimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnCerrar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 802, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCerrarActionPerformed
        this.dispose(); //Método propio del Frame para precindir del frame 
    }//GEN-LAST:event_jbtnCerrarActionPerformed
    //METODO QUE ACTUALIZA LA TABLA DE MEMORIA VIRTUAL, RECBE LA COLA DE PROCESOS, EL PROCESO QUE SE ESTA TRABAJANDO Y EL HILO
    public void ActualizarMemoriaVirtual(Cola _p, int indice, Thread _t) {
        p = _p;
        //SE SACA EL MODELO DE LA TABLA DE MEMORIA VIRTUAL
        DefaultTableModel modelo = (DefaultTableModel) jtblVirtual.getModel();
        modelo.setRowCount(0);
        //SE INICIALIZAN TODAS LAS VARIABLES LOCALES A SUS VALORES INICIALES CADA VEZ QUE SE LLAMA EL METODO
        proc = 65;
        pag = 0;
        desp = 0;
        contador = 0;
        total_paginas = 0;

        referencias++; //Se aumentan las referencias totales
        int fallo = 0;
        boolean k = false;

        //FOR QUE LLENA LA TABLA DE LA MEMORIA VIRTUAL
        for (int j = 0; j < p.Length(); j++) {
            if (p.getProceso(j).getResiduo() != 0) {
                Object[] Table = new Object[6];// SE CREA UN OBJETO TIPO Object PARA AGREGAR RENGLONES

                //FOR PARA PONER EL PROCESO DE ACORDE A SU NUMERO DE PAGINAS
                for (int i = 0; i < p.getProceso(j).getNpaginas(); i++) {
                    int valor = 0;
                    //COMO CADA PAGINA TIENE DESPLAZAMIENTO DE 4 SE HACE UN WHILE
                    while (valor < 4) {
                        Table[0] = valor == 0 ? pag++ : ""; //NUMERO DE PAGINA
                        Table[1] = desp++; //DESPLAZAMIENTO DE LA PAGINA
                        Table[2] = contador++;//DIRECCION LOGICA DE LA PAGINA
                        Table[3] = (char) (cont.nextInt(50) + 65); //CONTENIDO
                        modelo.addRow(Table);//SE AGREGA EL REGLON A LA TABLA DE MEMORIA VIRTUAL
                        valor++;
                    }
                    desp = 0;
                    jtblVirtual.setModel(modelo);//SE ASIGNA EL MODELO A LA TABLA DE MEMORIA VIRTUAL
                    total_paginas++;

                }
                //FOR PARA LLENAR LA TABLA DE PAGINAS CON SU PROCESO Y SU NUMERO DE PAGINAS
                if (ya < p.Length()) {
                    Object[] tabla2 = new Object[2];
                    tabla2[0] = (char) proc;
                    tabla2[1] = p.getProceso(j).getNpaginas();
                    modelopaginas.addRow(tabla2);
                    Tablepaginas.setModel(modelopaginas);
                    ya++;
                }
                
                if (proc < 65 + p.Length() - 1) {
                    proc++;
                }
            }
        }
        
        ejecucion = p.getProceso(indice);//SE ASIGNA EL PROCESO QUE SE ESTA EJECUTANDO A LA VARIABLE ejecucion
        fifo.Insert(ejecucion);//SE INSERTA EL PROCESO EN LA COLA FIFO
        int pagina = 0;//VARIABLE PARA QUE LAS PAGINAS EMPIECEN A CONTAR DESDE EL 0
        int paginas = ejecucion.getNpaginas();// SE ASIGNA EL NUMERO DE PAFGINAS DEL PROCESO
        String nombrepagina = " ";//SE CREA UNA VARIABLE STRING PARA DESPUES ASIGNARLA EN LA TABLA DE MEMORIA REAL
        if (jtblVirtual.getRowCount() != 0 && suma != marcos && suma + paginas <= marcos) { //CONDICION PARA SABER SI PUEDE INGRESAR UN PROCESO A LA TABLA DE MEMORIA REAL

            //FOR PARA LLENAR LA TABLA DE MEMORIA REAL    
            for (int i = 0; i < 10; i++) {
                //CONIDICION QUE COMPUEBA QUE EL MARCO ESTE DISPONIBLE
                if (jtblReal.getValueAt(i, 1).toString().equalsIgnoreCase("-")) {
                    if (pagina != paginas) {
                        //SE ASIGNA EL NOMBRE DEL PROCESO A SU MARCO CORRESPONDIENTE
                        nombrepagina = (ejecucion.getNumProceso()) + "." + pagina;
                        //IF PARA SABER SI OCURRE UN FALLO DE PAGINA
                        char index =  ejecucion.getNumProceso();
                        for (int j = 0; j < 10; j++) {
                            if (index == jtblReal.getValueAt(j, 1).toString().charAt(0)) {
                                k = false;
                            } else {
                                k = true;
                            }
                        }
                        if (k) {
                            //if(!nombrepagina.trim().equalsIgnoreCase(jtblReal.getValueAt(i, 1).toString())){ 
                            //SE MUESTRA UN LABEL INDICANDO EN QUE PAGINA OCURRIO EL FALLO
                            jlblFallo.setText("Fallo pagina " + nombrepagina);
                            if (fallo == 0) {
                                fallos++;// SE AUMENTA LA VARIABLE PARA SACAR EL TOTAL DE FALLOS
                                fallo++;
                            }
                            if (ejecucion.getResiduo() != 0) {
                                jtblReal.setValueAt(nombrepagina, i, 1);

                                //FORMULA PARA CALCULAR LA DIRECCION FISICA
                                jtblReal.setValueAt(((pagina) * 4) + contenido.nextInt(4), i, 2);

                                pagina++;
                                suma++;
                            }
                        }
                    }
                }
            }
            fallo = 0;
            //CONDICION QUE SE EJECUTA SI EL NUMERO DE PAGINAS ES MAYOR QUE LOS MARCOS DISPONIBLES
        } else if (suma == marcos || suma + paginas >= marcos) {

            int c = 0;
            //SE ELIMINA IN PROCESO PARA QUE ENTRE OTRO
            for (int i = 0; i < marcos; i++) {
                //String f = (char)(fifo.getProceso(0).getNumProceso()+64) +"."+ c;//SE CONVIERTE EL NUMERO DE PROCESO A SU RESPECTIVA LETRA
                char index = (fifo.getProceso(0).getNumProceso());

                if (index == jtblReal.getValueAt(i, 1).toString().charAt(0)) {
                    //if(f.equalsIgnoreCase(jtblReal.getValueAt(i, 1).toString())){ //SE COMPARA QUE LOS PROCESOS SEAN IGUALES
                    jtblReal.setValueAt("-", i, 1); //SE VACIA EL MARCO PARA DEJARLO DISPONIBLE
                    jtblReal.setValueAt(" ", i, 2);
                    suma--;// SE DECREMENTA LA VARIABLE PARA SABER QUE SE DEJO LIBRE UN MARCO
                    System.out.println("Resta: " + suma);
                    try {
                        _t.sleep(200);
                    } catch (InterruptedException ex) {
                        System.out.println("ERROR Al DORMIR POR PAGINACION" + ex);
                    }
                    i = 0;
                }
                c++;
                //----------------------------               
                //CONIDICION QUE COMPUEBA QUE EL MARCO ESTE DISPONIBLE
                if (jtblReal.getValueAt(i, 1).toString().equalsIgnoreCase("-")) {
                    if (pagina != paginas) {
                        //SE ASIGNA EL NOMBRE DEL PROCESO A SU MARCO CORRESPONDIENTE
                        nombrepagina = (ejecucion.getNumProceso()) + "." + pagina;
                        //IF PARA SABER SI OCURRE UN FALLO DE PAGINA
                        if (index != jtblReal.getValueAt(i, 1).toString().charAt(0)) {
                            //if(!jtblReal.getValueAt(i, 1).toString().equals(nombrepagina)){ 
                            //SE MUESTRA UN LABEL INDICANDO EN QUE PAGINA OCURRIO EL FALLO
                            if (ejecucion.getResiduo() != 0) {
                                jtblReal.setValueAt(nombrepagina, i, 1);

                                //FORMULA PARA CALCULAR LA DIRECCION FISICA
                                jtblReal.setValueAt(((pagina) * 4) + contenido.nextInt(4), i, 2);

                                pagina++;
                                suma++;
                                System.out.println("suma: " + suma);
                            }
                        }
                    }
                }
                fallo = 0;
                //-----------------

            }
            //suma-=fifo.getProceso(0).getNpaginas();

            fifo.Insert(ejecucion);//SE INSERTA EL PROCESO EN EJECUCION A LA COLA DE FIFO
            fifo.Remove();//SE QUITA EL PROCESO DE LA COLA FIFO
            try {

                _t.sleep(1000);
            } catch (InterruptedException ex) {
                System.out.println("ERROR Al DORMIR POR PAGINACION" + ex);
            }

            // ActualizarMemoriaVirtual(p, indice, _t);
        }    //CONDICION QUE VERIFICA QUE LA TABLA VIRTUAL ESTE VACIA
        if (jtblVirtual.getRowCount() == 0) {
            for (int i = 0; i < 10; i++) {
                //SE ELIMINAN LOS PROCESOS DE LA TABLA REAL
                jtblReal.setValueAt("-", i, 1); 
                jtblReal.setValueAt("0", i, 2);
                jlblFallo.setText("N° de Fallos :");
                jlblFalloN.setText(fallos + "");//SE MUESTRA EL NUMERO TOTAL DE FALLOS EN UN LABEL
                jlblReferencias.setText("N° Total de Referencias: ");
                jlblRefN.setText(referencias + "");//SE MUESTRA EL NUMERO TOTAL DE REFERENCIAS
                float F = (fallos / referencias);
                float R = 1 - F;
                jlblrrendimiento.setText("Rendimiento: " + ((R) * 100) + "%");//SE MUESTRA EL RENDIMIENTO 
            }
            actualizartablamarcos();
            _t.stop(); //SE DETIENE EL HILO
        }
        actualizartablamarcos();
    }

    //METODO PARA ACUTALIZAR EL LA TABLA DE MARCOS DISPONIBLES
    public void actualizartablamarcos() {
        modelodisp.setRowCount(0);
        //FOR QUE RECORRE LA TABLA DE MEMORIA REAL EN BUSCA DE MARCOS DISPOIBLES
        for (int i = 0; i < jtblReal.getRowCount(); i++) {
            //COMPRUEBA QUE EL MARCO ESTE DISPOIBLE
            if (jtblReal.getValueAt(i, 1).toString().equals("-")) {
                Object[] tabla = new Object[1];
                //AGREGA EL MARCO DISPONIBLE A LA TABLA DE MARCOS DISPONIBLES
                tabla[0] = jtblReal.getValueAt(i, 0);
                modelodisp.addRow(tabla);
                jtblMarcosDisponibles.setModel(modelodisp);
            }
        }
    }

    public void bloqueado(char idb) {
        int c = 0;
        for (int i = 0; i < marcos; i++) {
            char index = (idb);
            if (index == jtblReal.getValueAt(i, 1).toString().charAt(0)) {
                jtblReal.setValueAt("-", i, 1); //SE VACIA EL MARCO PARA DEJARLO DISPONIBLE
                jtblReal.setValueAt(" ", i, 2);
                suma--;// SE DECREMENTA LA VARIABLE PARA SABER QUE SE DEJO LIBRE UN MARCO 

                i = 0;
                c = 0;
            }
            c++;
        }
        actualizartablamarcos(); //Método para actualizar los marcos en la tabla de marcos disponibles
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Paginacion_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Paginacion_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Paginacion_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Paginacion_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Paginacion_Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tablepaginas;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton jbtnCerrar;
    private javax.swing.JLabel jlblFallo;
    private javax.swing.JLabel jlblFalloN;
    private javax.swing.JLabel jlblRefN;
    private javax.swing.JLabel jlblReferencias;
    private javax.swing.JLabel jlblrrendimiento;
    private javax.swing.JTable jtblMarcosDisponibles;
    private javax.swing.JTable jtblReal;
    private javax.swing.JTable jtblVirtual;
    // End of variables declaration//GEN-END:variables
}
